# Generated by Django 5.2.1 on 2025-06-22 19:16

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RiskFactorWeight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factor_name', models.CharField(max_length=100, unique=True)),
                ('weight', models.FloatField()),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'screening_riskfactorweight',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('phone_number', models.CharField(max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('national_id', models.CharField(max_length=20, unique=True)),
                ('county', models.CharField(max_length=100)),
                ('sub_county', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=200)),
                ('marital_status', models.CharField(choices=[('SINGLE', 'Single'), ('MARRIED', 'Married'), ('DIVORCED', 'Divorced'), ('WIDOWED', 'Widowed')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('registered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registered_patients', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'screening_patient',
            },
        ),
        migrations.CreateModel(
            name='ScreeningRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screening_date', models.DateTimeField(auto_now_add=True)),
                ('age_at_first_intercourse', models.PositiveIntegerField(help_text='Age when first had sexual intercourse', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50)])),
                ('number_of_sexual_partners', models.PositiveIntegerField(default=1)),
                ('parity', models.PositiveIntegerField(default=0, help_text='Number of pregnancies')),
                ('hiv_status', models.CharField(choices=[('POSITIVE', 'Positive'), ('NEGATIVE', 'Negative'), ('UNKNOWN', 'Unknown')], max_length=20)),
                ('hpv_vaccination_status', models.CharField(choices=[('VACCINATED', 'Vaccinated'), ('NOT_VACCINATED', 'Not Vaccinated'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', max_length=20)),
                ('contraceptive_use', models.CharField(choices=[('NONE', 'None'), ('ORAL_PILLS', 'Oral Contraceptive Pills'), ('INJECTION', 'Injectable Contraceptives'), ('IUD', 'Intrauterine Device'), ('BARRIER', 'Barrier Methods'), ('OTHER', 'Other')], default='NONE', max_length=30)),
                ('smoking_status', models.CharField(choices=[('NEVER', 'Never'), ('FORMER', 'Former Smoker'), ('CURRENT', 'Current Smoker')], default='NEVER', max_length=20)),
                ('family_history_cervical_cancer', models.BooleanField(default=False)),
                ('previous_abnormal_pap', models.BooleanField(default=False)),
                ('last_screening_date', models.DateField(blank=True, null=True)),
                ('via_result', models.CharField(blank=True, choices=[('NEGATIVE', 'Negative'), ('POSITIVE', 'Positive'), ('SUSPICIOUS', 'Suspicious for Cancer')], max_length=20, null=True)),
                ('bethesda_category', models.CharField(blank=True, choices=[('NILM', 'Negative for Intraepithelial Lesion or Malignancy'), ('ASCUS', 'Atypical Squamous Cells of Undetermined Significance'), ('LSIL', 'Low-grade Squamous Intraepithelial Lesion'), ('HSIL', 'High-grade Squamous Intraepithelial Lesion'), ('AGC', 'Atypical Glandular Cells'), ('CANCER', 'Squamous Cell Carcinoma')], max_length=20, null=True)),
                ('cytology_image', models.ImageField(blank=True, null=True, upload_to='cytology_images/')),
                ('ai_risk_score', models.FloatField(help_text='AI-generated risk score between 0 and 1', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('risk_level', models.CharField(choices=[('LOW', 'Low Risk'), ('MODERATE', 'Moderate Risk'), ('HIGH', 'High Risk')], max_length=20)),
                ('ai_confidence', models.FloatField(help_text='AI model confidence in prediction', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recommended_action', models.TextField()),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('referral_needed', models.BooleanField(default=False)),
                ('referral_facility', models.CharField(blank=True, max_length=200)),
                ('clinical_notes', models.TextField(blank=True)),
                ('offline_sync_status', models.BooleanField(default=False, help_text='True if synced from offline')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screening_records', to='screening.patient')),
                ('screened_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenings_conducted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'screening_screeningrecord',
                'ordering': ['-screening_date'],
            },
        ),
        migrations.CreateModel(
            name='ScreeningFollowUp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follow_up_date', models.DateField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONTACTED', 'Patient Contacted'), ('COMPLETED', 'Follow-up Completed'), ('MISSED', 'Missed Appointment'), ('LOST', 'Lost to Follow-up')], default='PENDING', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('contact_method', models.CharField(blank=True, choices=[('PHONE', 'Phone Call'), ('SMS', 'SMS'), ('EMAIL', 'Email'), ('HOME_VISIT', 'Home Visit'), ('CLINIC_VISIT', 'Clinic Visit')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contacted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='follow_ups_conducted', to=settings.AUTH_USER_MODEL)),
                ('screening_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_ups', to='screening.screeningrecord')),
            ],
            options={
                'db_table': 'screening_screeningfollowup',
                'ordering': ['-follow_up_date'],
            },
        ),
    ]
